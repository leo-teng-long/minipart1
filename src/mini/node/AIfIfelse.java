/* This file was generated by SableCC (http://www.sablecc.org/). */

package mini.node;

import java.util.*;
import mini.analysis.*;

@SuppressWarnings("nls")
public final class AIfIfelse extends PIfelse
{
    private TIf _if_;
    private PExpr _expr_;
    private TThen _then_;
    private final LinkedList<PStmt> _stmt_ = new LinkedList<PStmt>();
    private TEndif _endif_;

    public AIfIfelse()
    {
        // Constructor
    }

    public AIfIfelse(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TThen _then_,
        @SuppressWarnings("hiding") List<?> _stmt_,
        @SuppressWarnings("hiding") TEndif _endif_)
    {
        // Constructor
        setIf(_if_);

        setExpr(_expr_);

        setThen(_then_);

        setStmt(_stmt_);

        setEndif(_endif_);

    }

    @Override
    public Object clone()
    {
        return new AIfIfelse(
            cloneNode(this._if_),
            cloneNode(this._expr_),
            cloneNode(this._then_),
            cloneList(this._stmt_),
            cloneNode(this._endif_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfIfelse(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TThen getThen()
    {
        return this._then_;
    }

    public void setThen(TThen node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    public LinkedList<PStmt> getStmt()
    {
        return this._stmt_;
    }

    public void setStmt(List<?> list)
    {
        for(PStmt e : this._stmt_)
        {
            e.parent(null);
        }
        this._stmt_.clear();

        for(Object obj_e : list)
        {
            PStmt e = (PStmt) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._stmt_.add(e);
        }
    }

    public TEndif getEndif()
    {
        return this._endif_;
    }

    public void setEndif(TEndif node)
    {
        if(this._endif_ != null)
        {
            this._endif_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endif_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._expr_)
            + toString(this._then_)
            + toString(this._stmt_)
            + toString(this._endif_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        if(this._stmt_.remove(child))
        {
            return;
        }

        if(this._endif_ == child)
        {
            this._endif_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((TThen) newChild);
            return;
        }

        for(ListIterator<PStmt> i = this._stmt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStmt) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._endif_ == oldChild)
        {
            setEndif((TEndif) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package mini.parser;

import mini.lexer.*;
import mini.node.*;
import mini.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProg node1 = (PProg) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogramprog1Prog */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprogramprog2Prog */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AAprogramprog3Prog */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list, false);
            }
            break;
            case 3: /* reduce AAprogramprog4Prog */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list, false);
            }
            break;
            case 4: /* reduce ADeclareDecl */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AIntType */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AFloatType */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce AStringType */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list, false);
            }
            break;
            case 8: /* reduce AAssignStmt */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce AIfelseStmt */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list, false);
            }
            break;
            case 10: /* reduce ALoopStmt */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list, false);
            }
            break;
            case 11: /* reduce AInputStmt */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list, false);
            }
            break;
            case 12: /* reduce AOutputStmt */
            {
                ArrayList<Object> list = new12();
                push(goTo(3), list, false);
            }
            break;
            case 13: /* reduce AAssignAssign */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list, false);
            }
            break;
            case 14: /* reduce AAififelse1Ifelse */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list, false);
            }
            break;
            case 15: /* reduce AAififelse2Ifelse */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list, false);
            }
            break;
            case 16: /* reduce AAifelseifelse1Ifelse */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list, false);
            }
            break;
            case 17: /* reduce AAifelseifelse2Ifelse */
            {
                ArrayList<Object> list = new17();
                push(goTo(5), list, false);
            }
            break;
            case 18: /* reduce AAifelseifelse3Ifelse */
            {
                ArrayList<Object> list = new18();
                push(goTo(5), list, false);
            }
            break;
            case 19: /* reduce AAifelseifelse4Ifelse */
            {
                ArrayList<Object> list = new19();
                push(goTo(5), list, false);
            }
            break;
            case 20: /* reduce AAwhileloop1Loop */
            {
                ArrayList<Object> list = new20();
                push(goTo(6), list, false);
            }
            break;
            case 21: /* reduce AAwhileloop2Loop */
            {
                ArrayList<Object> list = new21();
                push(goTo(6), list, false);
            }
            break;
            case 22: /* reduce AReadInput */
            {
                ArrayList<Object> list = new22();
                push(goTo(7), list, false);
            }
            break;
            case 23: /* reduce APrintOutput */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list, false);
            }
            break;
            case 24: /* reduce APlutExpr */
            {
                ArrayList<Object> list = new24();
                push(goTo(9), list, false);
            }
            break;
            case 25: /* reduce AMinusExpr */
            {
                ArrayList<Object> list = new25();
                push(goTo(9), list, false);
            }
            break;
            case 26: /* reduce AFactorExpr */
            {
                ArrayList<Object> list = new26();
                push(goTo(9), list, false);
            }
            break;
            case 27: /* reduce AMultiplyFactor */
            {
                ArrayList<Object> list = new27();
                push(goTo(10), list, false);
            }
            break;
            case 28: /* reduce ADivideFactor */
            {
                ArrayList<Object> list = new28();
                push(goTo(10), list, false);
            }
            break;
            case 29: /* reduce ATermFactor */
            {
                ArrayList<Object> list = new29();
                push(goTo(10), list, false);
            }
            break;
            case 30: /* reduce AParenTerm */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list, false);
            }
            break;
            case 31: /* reduce AUnaryTerm */
            {
                ArrayList<Object> list = new31();
                push(goTo(11), list, false);
            }
            break;
            case 32: /* reduce AIdTerm */
            {
                ArrayList<Object> list = new32();
                push(goTo(11), list, false);
            }
            break;
            case 33: /* reduce AIntTerm */
            {
                ArrayList<Object> list = new33();
                push(goTo(11), list, false);
            }
            break;
            case 34: /* reduce AFloatTerm */
            {
                ArrayList<Object> list = new34();
                push(goTo(11), list, false);
            }
            break;
            case 35: /* reduce AStringTerm */
            {
                ArrayList<Object> list = new35();
                push(goTo(11), list, false);
            }
            break;
            case 36: /* reduce ATerminal$Decl */
            {
                ArrayList<Object> list = new36();
                push(goTo(12), list, true);
            }
            break;
            case 37: /* reduce ANonTerminal$Decl */
            {
                ArrayList<Object> list = new37();
                push(goTo(12), list, true);
            }
            break;
            case 38: /* reduce ATerminal$Stmt */
            {
                ArrayList<Object> list = new38();
                push(goTo(13), list, true);
            }
            break;
            case 39: /* reduce ANonTerminal$Stmt */
            {
                ArrayList<Object> list = new39();
                push(goTo(13), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogramprog1Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pprogNode1 = new AProgramProg(listNode2, listNode3);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogramprog2Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pprogNode1 = new AProgramProg(listNode3, listNode4);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAprogramprog3Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprogNode1 = new AProgramProg(listNode2, listNode4);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAprogramprog4Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pprogNode1 = new AProgramProg(listNode3, listNode5);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADeclareDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        TVar tvarNode2;
        TId tidNode3;
        TCol tcolNode4;
        PType ptypeNode5;
        TSemi tsemiNode6;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tcolNode4 = (TCol)nodeArrayList3.get(0);
        ptypeNode5 = (PType)nodeArrayList4.get(0);
        tsemiNode6 = (TSemi)nodeArrayList5.get(0);

        pdeclNode1 = new ADeclareDecl(tvarNode2, tidNode3, tcolNode4, ptypeNode5, tsemiNode6);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AFloatType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TFloat tfloatNode2;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);

        ptypeNode1 = new AFloatType(tfloatNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AStringType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(tstringNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAssignStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PAssign passignNode2;
        passignNode2 = (PAssign)nodeArrayList1.get(0);

        pstmtNode1 = new AAssignStmt(passignNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AIfelseStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PIfelse pifelseNode2;
        pifelseNode2 = (PIfelse)nodeArrayList1.get(0);

        pstmtNode1 = new AIfelseStmt(pifelseNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ALoopStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PLoop ploopNode2;
        ploopNode2 = (PLoop)nodeArrayList1.get(0);

        pstmtNode1 = new ALoopStmt(ploopNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AInputStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PInput pinputNode2;
        pinputNode2 = (PInput)nodeArrayList1.get(0);

        pstmtNode1 = new AInputStmt(pinputNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AOutputStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        POutput poutputNode2;
        poutputNode2 = (POutput)nodeArrayList1.get(0);

        pstmtNode1 = new AOutputStmt(poutputNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAssignAssign */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssign passignNode1;
        {
            // Block
        TId tidNode2;
        TEqual tequalNode3;
        PExpr pexprNode4;
        TSemi tsemiNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);

        passignNode1 = new AAssignAssign(tidNode2, tequalNode3, pexprNode4, tsemiNode5);
        }
	nodeList.add(passignNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAififelse1Ifelse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfelse pifelseNode1;
        {
            // Block
        TIf tifNode2;
        PExpr pexprNode3;
        TThen tthenNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TEndif tendifNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        {
            // Block
        }
        tendifNode6 = (TEndif)nodeArrayList4.get(0);

        pifelseNode1 = new AIfIfelse(tifNode2, pexprNode3, tthenNode4, listNode5, tendifNode6);
        }
	nodeList.add(pifelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAififelse2Ifelse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfelse pifelseNode1;
        {
            // Block
        TIf tifNode2;
        PExpr pexprNode3;
        TThen tthenNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TEndif tendifNode7;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tendifNode7 = (TEndif)nodeArrayList5.get(0);

        pifelseNode1 = new AIfIfelse(tifNode2, pexprNode3, tthenNode4, listNode6, tendifNode7);
        }
	nodeList.add(pifelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAifelseifelse1Ifelse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfelse pifelseNode1;
        {
            // Block
        TIf tifNode2;
        PExpr pexprNode3;
        TThen tthenNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TElse telseNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TEndif tendifNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        {
            // Block
        }
        telseNode6 = (TElse)nodeArrayList4.get(0);
        {
            // Block
        }
        tendifNode8 = (TEndif)nodeArrayList5.get(0);

        pifelseNode1 = new AIfelseIfelse(tifNode2, pexprNode3, tthenNode4, listNode5, telseNode6, listNode7, tendifNode8);
        }
	nodeList.add(pifelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAifelseifelse2Ifelse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfelse pifelseNode1;
        {
            // Block
        TIf tifNode2;
        PExpr pexprNode3;
        TThen tthenNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TElse telseNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TEndif tendifNode9;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        telseNode7 = (TElse)nodeArrayList5.get(0);
        {
            // Block
        }
        tendifNode9 = (TEndif)nodeArrayList6.get(0);

        pifelseNode1 = new AIfelseIfelse(tifNode2, pexprNode3, tthenNode4, listNode6, telseNode7, listNode8, tendifNode9);
        }
	nodeList.add(pifelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAifelseifelse3Ifelse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfelse pifelseNode1;
        {
            // Block
        TIf tifNode2;
        PExpr pexprNode3;
        TThen tthenNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TElse telseNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TEndif tendifNode9;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        {
            // Block
        }
        telseNode6 = (TElse)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tendifNode9 = (TEndif)nodeArrayList6.get(0);

        pifelseNode1 = new AIfelseIfelse(tifNode2, pexprNode3, tthenNode4, listNode5, telseNode6, listNode8, tendifNode9);
        }
	nodeList.add(pifelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAifelseifelse4Ifelse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfelse pifelseNode1;
        {
            // Block
        TIf tifNode2;
        PExpr pexprNode3;
        TThen tthenNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TElse telseNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEndif tendifNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        telseNode7 = (TElse)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tendifNode10 = (TEndif)nodeArrayList7.get(0);

        pifelseNode1 = new AIfelseIfelse(tifNode2, pexprNode3, tthenNode4, listNode6, telseNode7, listNode9, tendifNode10);
        }
	nodeList.add(pifelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAwhileloop1Loop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLoop ploopNode1;
        {
            // Block
        TWhile twhileNode2;
        PExpr pexprNode3;
        TDo tdoNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TDone tdoneNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        {
            // Block
        }
        tdoneNode6 = (TDone)nodeArrayList4.get(0);

        ploopNode1 = new AWhileLoop(twhileNode2, pexprNode3, tdoNode4, listNode5, tdoneNode6);
        }
	nodeList.add(ploopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAwhileloop2Loop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLoop ploopNode1;
        {
            // Block
        TWhile twhileNode2;
        PExpr pexprNode3;
        TDo tdoNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TDone tdoneNode7;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tdoneNode7 = (TDone)nodeArrayList5.get(0);

        ploopNode1 = new AWhileLoop(twhileNode2, pexprNode3, tdoNode4, listNode6, tdoneNode7);
        }
	nodeList.add(ploopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AReadInput */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInput pinputNode1;
        {
            // Block
        TRead treadNode2;
        TId tidNode3;
        TSemi tsemiNode4;
        treadNode2 = (TRead)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        pinputNode1 = new AReadInput(treadNode2, tidNode3, tsemiNode4);
        }
	nodeList.add(pinputNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce APrintOutput */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POutput poutputNode1;
        {
            // Block
        TPrint tprintNode2;
        PExpr pexprNode3;
        TSemi tsemiNode4;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        poutputNode1 = new APrintOutput(tprintNode2, pexprNode3, tsemiNode4);
        }
	nodeList.add(poutputNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce APlutExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TPlus tplusNode3;
        PFactor pfactorNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pexprNode1 = new APlutExpr(pexprNode2, tplusNode3, pfactorNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AMinusExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TMinus tminusNode3;
        PFactor pfactorNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pexprNode1 = new AMinusExpr(pexprNode2, tminusNode3, pfactorNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AFactorExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        pexprNode1 = new AFactorExpr(pfactorNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AMultiplyFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TMul tmulNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tmulNode3 = (TMul)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new AMultiplyFactor(pfactorNode2, tmulNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ADivideFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TDiv tdivNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new ADivideFactor(pfactorNode2, tdivNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ATermFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pfactorNode1 = new ATermFactor(ptermNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AParenTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        ptermNode1 = new AParenTerm(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AUnaryTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TMinus tminusNode2;
        PTerm ptermNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        ptermNode3 = (PTerm)nodeArrayList2.get(0);

        ptermNode1 = new AUnaryTerm(tminusNode2, ptermNode3);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AIdTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptermNode1 = new AIdTerm(tidNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AIntTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TIntconst tintconstNode2;
        tintconstNode2 = (TIntconst)nodeArrayList1.get(0);

        ptermNode1 = new AIntTerm(tintconstNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AFloatTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TFloatconst tfloatconstNode2;
        tfloatconstNode2 = (TFloatconst)nodeArrayList1.get(0);

        ptermNode1 = new AFloatTerm(tfloatconstNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AStringTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TStringconst tstringconstNode2;
        tstringconstNode2 = (TStringconst)nodeArrayList1.get(0);

        ptermNode1 = new AStringTerm(tstringconstNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ATerminal$Decl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecl pdeclNode1;
        pdeclNode1 = (PDecl)nodeArrayList1.get(0);
	if(pdeclNode1 != null)
	{
	  listNode2.add(pdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ANonTerminal$Decl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDecl pdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclNode2 = (PDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclNode2 != null)
	{
	  listNode3.add(pdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {4, SHIFT, 2}, {7, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {22, SHIFT, 6}, },
			{{-1, ERROR, 1}, {22, SHIFT, 17}, },
			{{-1, ERROR, 2}, {15, SHIFT, 18}, {18, SHIFT, 19}, {22, SHIFT, 20}, {23, SHIFT, 21}, {24, SHIFT, 22}, {25, SHIFT, 23}, },
			{{-1, ERROR, 3}, {15, SHIFT, 18}, {18, SHIFT, 19}, {22, SHIFT, 20}, {23, SHIFT, 21}, {24, SHIFT, 22}, {25, SHIFT, 23}, },
			{{-1, ERROR, 4}, {22, SHIFT, 28}, },
			{{-1, ERROR, 5}, {15, SHIFT, 18}, {18, SHIFT, 19}, {22, SHIFT, 20}, {23, SHIFT, 21}, {24, SHIFT, 22}, {25, SHIFT, 23}, },
			{{-1, ERROR, 6}, {13, SHIFT, 30}, },
			{{-1, ERROR, 7}, {26, ACCEPT, -1}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {4, SHIFT, 2}, {7, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {22, SHIFT, 6}, },
			{{-1, REDUCE, 2}, {4, SHIFT, 2}, {7, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {22, SHIFT, 6}, },
			{{-1, ERROR, 17}, {20, SHIFT, 34}, },
			{{-1, ERROR, 18}, {15, SHIFT, 18}, {18, SHIFT, 19}, {22, SHIFT, 20}, {23, SHIFT, 21}, {24, SHIFT, 22}, {25, SHIFT, 23}, },
			{{-1, ERROR, 19}, {15, SHIFT, 18}, {18, SHIFT, 19}, {22, SHIFT, 20}, {23, SHIFT, 21}, {24, SHIFT, 22}, {25, SHIFT, 23}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 24}, {5, SHIFT, 37}, {14, SHIFT, 38}, {15, SHIFT, 39}, },
			{{-1, REDUCE, 26}, {16, SHIFT, 40}, {17, SHIFT, 41}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 27}, {8, SHIFT, 42}, {14, SHIFT, 38}, {15, SHIFT, 39}, },
			{{-1, ERROR, 28}, {21, SHIFT, 43}, },
			{{-1, ERROR, 29}, {14, SHIFT, 38}, {15, SHIFT, 39}, {21, SHIFT, 44}, },
			{{-1, ERROR, 30}, {15, SHIFT, 18}, {18, SHIFT, 19}, {22, SHIFT, 20}, {23, SHIFT, 21}, {24, SHIFT, 22}, {25, SHIFT, 23}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 3}, {4, SHIFT, 2}, {7, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {22, SHIFT, 6}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 34}, {1, SHIFT, 46}, {2, SHIFT, 47}, {3, SHIFT, 48}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 36}, {14, SHIFT, 38}, {15, SHIFT, 39}, {19, SHIFT, 50}, },
			{{-1, ERROR, 37}, {4, SHIFT, 2}, {6, SHIFT, 51}, {7, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {22, SHIFT, 6}, },
			{{-1, ERROR, 38}, {15, SHIFT, 18}, {18, SHIFT, 19}, {22, SHIFT, 20}, {23, SHIFT, 21}, {24, SHIFT, 22}, {25, SHIFT, 23}, },
			{{-1, ERROR, 39}, {15, SHIFT, 18}, {18, SHIFT, 19}, {22, SHIFT, 20}, {23, SHIFT, 21}, {24, SHIFT, 22}, {25, SHIFT, 23}, },
			{{-1, ERROR, 40}, {15, SHIFT, 18}, {18, SHIFT, 19}, {22, SHIFT, 20}, {23, SHIFT, 21}, {24, SHIFT, 22}, {25, SHIFT, 23}, },
			{{-1, ERROR, 41}, {15, SHIFT, 18}, {18, SHIFT, 19}, {22, SHIFT, 20}, {23, SHIFT, 21}, {24, SHIFT, 22}, {25, SHIFT, 23}, },
			{{-1, ERROR, 42}, {4, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 57}, {10, SHIFT, 58}, {11, SHIFT, 4}, {12, SHIFT, 5}, {22, SHIFT, 6}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 45}, {14, SHIFT, 38}, {15, SHIFT, 39}, {21, SHIFT, 60}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 49}, {21, SHIFT, 61}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 52}, {4, SHIFT, 2}, {6, SHIFT, 62}, {7, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {22, SHIFT, 6}, },
			{{-1, REDUCE, 24}, {16, SHIFT, 40}, {17, SHIFT, 41}, },
			{{-1, REDUCE, 25}, {16, SHIFT, 40}, {17, SHIFT, 41}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 57}, {4, SHIFT, 2}, {7, SHIFT, 3}, {10, SHIFT, 63}, {11, SHIFT, 4}, {12, SHIFT, 5}, {22, SHIFT, 6}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 59}, {4, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 65}, {10, SHIFT, 66}, {11, SHIFT, 4}, {12, SHIFT, 5}, {22, SHIFT, 6}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 64}, {4, SHIFT, 2}, {7, SHIFT, 3}, {10, SHIFT, 67}, {11, SHIFT, 4}, {12, SHIFT, 5}, {22, SHIFT, 6}, },
			{{-1, ERROR, 65}, {4, SHIFT, 2}, {7, SHIFT, 3}, {10, SHIFT, 68}, {11, SHIFT, 4}, {12, SHIFT, 5}, {22, SHIFT, 6}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 69}, {4, SHIFT, 2}, {7, SHIFT, 3}, {10, SHIFT, 70}, {11, SHIFT, 4}, {12, SHIFT, 5}, {22, SHIFT, 6}, },
			{{-1, REDUCE, 19}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 7}, },
			{{-1, 8}, {15, 31}, },
			{{-1, 49}, },
			{{-1, 9}, {16, 33}, {32, 33}, {52, 33}, {59, 33}, {64, 33}, {69, 33}, },
			{{-1, 10}, },
			{{-1, 11}, },
			{{-1, 12}, },
			{{-1, 13}, },
			{{-1, 14}, },
			{{-1, 24}, {3, 27}, {5, 29}, {19, 36}, {30, 45}, },
			{{-1, 25}, {38, 53}, {39, 54}, },
			{{-1, 26}, {18, 35}, {40, 55}, {41, 56}, },
			{{-1, 15}, },
			{{-1, 16}, {15, 32}, {37, 52}, {42, 59}, {57, 64}, {65, 69}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'var', 'while', 'if', 'read', 'print', id, EOF",
			"expecting: id",
			"expecting: '-', '(', id, intconst, floatconst, stringconst",
			"expecting: '='",
			"expecting: EOF",
			"expecting: 'while', 'done', 'if', 'else', 'endif', 'read', 'print', id, EOF",
			"expecting: 'while', 'if', 'read', 'print', id, EOF",
			"expecting: ':'",
			"expecting: 'do', 'then', '+', '-', '*', '/', ')', ';'",
			"expecting: 'do', '+', '-'",
			"expecting: 'then', '+', '-'",
			"expecting: ';'",
			"expecting: '+', '-', ';'",
			"expecting: 'int', 'float', 'string'",
			"expecting: '+', '-', ')'",
			"expecting: 'while', 'done', 'if', 'read', 'print', id",
			"expecting: 'while', 'if', 'else', 'endif', 'read', 'print', id",
			"expecting: 'while', 'if', 'endif', 'read', 'print', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 1, 2, 3, 4, 0, 5, 5, 5, 5, 5, 5, 0, 6, 7, 2, 2, 8, 8, 8, 8, 9, 8, 8, 10, 11, 12, 2, 0, 6, 5, 13, 8, 14, 15, 2, 2, 2, 2, 16, 5, 5, 12, 11, 11, 11, 11, 8, 5, 15, 8, 8, 8, 8, 17, 5, 16, 5, 0, 5, 5, 17, 17, 5, 5, 5, 17, 5, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
